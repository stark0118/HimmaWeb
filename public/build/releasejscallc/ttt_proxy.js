// **********************************************************************
// This file was generated by a NodejsCallC parser!
// NodejsCallC version 1.0.0 by liwang112358@gmail.com
// Generated from desc.json at Fri Mar 27 2020 01:54:59 GMT-0700 (Pacific Daylight Time)
// **********************************************************************
const cp = require('child_process');
const path = require('path');
const os = require('os');
const endianess = os.endianness();
Buffer.prototype.writeInt32 = function(value, offset = 0) {
    if (endianess === 'LE') {
        this.writeInt32LE(value, offset);
    } else {
        this.writeInt32BE(value, offset);
    }
};
Buffer.prototype.readInt32 = function(offset = 0) {
    if (endianess === 'LE') {
        return this.readInt32LE(offset);
    } else {
        return this.readInt32BE(offset);
    }
};
Buffer.prototype.writeFloat = function(value, offset = 0) {
    if (endianess === 'LE') {
        this.writeFloatLE(value, offset);
    } else {
        this.writeFloatBE(value, offset);
    }
};
Buffer.prototype.readFloat = function(offset = 0) {
    if (endianess === 'LE') {
        return this.readFloatLE(offset);
    } else {
        return this.readFloatBE(offset);
    }
};

function ttt(init_req, init_env) {
    let cmd = '';
    if ('c' === 'c') {
        cmd = path.join(__dirname, `./ttt`);
    } else if ('c' === 'python') {
        const file_name = path.join(__dirname, `./ttt_imp.py`);
        cmd = `${file_name}`;
    }
    this.child = cp.spawn(cmd, [], {
        env: init_env
    });
    this.buffer = Buffer.alloc(0);
    this.sid = 0;
    this.context = {};
    this.is_ready = false;
    this.on_ready = () => {};
    this.child_close = () => {
        process.exit();
    }
    this.child.stdout.on('data', (data) => {
        this.buffer = Buffer.concat([this.buffer, data]);
        while (0 < this.buffer.length) {
            if (this.buffer.length < 12) {
                break;
            }
            const type = this.buffer.readInt32();
            const sid = this.buffer.readInt32(4);
            const buffer_len = this.buffer.readInt32(8);
            if (this.buffer.length - 12 < buffer_len) {
                break;
            }
            let buffer = this.buffer.slice(12, buffer_len + 12);
            const rsp = {};
            if (type === 0) {
                const str_len_func_name = buffer.readInt32();
                buffer = buffer.slice(4);
                const func_name = buffer.slice(0, str_len_func_name).toString();
                buffer = buffer.slice(str_len_func_name);
                if (func_name === "get_proc_cpu") {
                    rsp.pcpu = buffer.readFloat();
                    buffer = buffer.slice(4);
                }
                if (func_name === "get_proc_mem") {
                    rsp.pmem = buffer.readFloat();
                    buffer = buffer.slice(4);
                }
                const key = sid + func_name;
                this.context[key].cb(rsp);
                delete this.context[key];
            } else if (type === 1) {
                console.log(buffer.toString());
            } else if (type === 2) {
                this.is_ready = true;
                this.on_ready && this.on_ready();
            }
            this.buffer = this.buffer.slice(buffer_len + 12);
        }
    });
    this.child.on('close', () => {
        console.log('child closed.');
        this.child_close();
    });
    this.child.stderr.on('data', (data) => {
        console.error('child error : ', data.toString());
    });
    this.initialize(init_req);
}
ttt.prototype.get_proc_cpu = function(req, cb) {
    const sid = this.sid++;
    this.sid %= 2147483647;
    const key = sid + "get_proc_cpu";
    this.context[key] = {
        sid,
        cb
    };
    let buffer = Buffer.alloc(4);
    buffer.writeInt32(sid);
    const buffer_get_proc_cpu = Buffer.alloc(Buffer.byteLength("get_proc_cpu"));
    buffer_get_proc_cpu.write("get_proc_cpu");
    const str_len_get_proc_cpu = Buffer.byteLength(buffer_get_proc_cpu);
    const len_buffer_get_proc_cpu = Buffer.alloc(4);
    len_buffer_get_proc_cpu.writeInt32(str_len_get_proc_cpu);
    buffer = Buffer.concat([buffer, len_buffer_get_proc_cpu, buffer_get_proc_cpu]);
    const buffer_0 = Buffer.alloc(4);
    buffer_0.writeInt32(req.pid);
    buffer = Buffer.concat([buffer, buffer_0]);
    const buffer_len = buffer.length;
    const len_buffer = Buffer.alloc(4);
    len_buffer.writeInt32(buffer_len);
    this.child.stdin.write(len_buffer);
    this.child.stdin.write(buffer);
}
ttt.prototype.get_proc_mem = function(req, cb) {
    const sid = this.sid++;
    this.sid %= 2147483647;
    const key = sid + "get_proc_mem";
    this.context[key] = {
        sid,
        cb
    };
    let buffer = Buffer.alloc(4);
    buffer.writeInt32(sid);
    const buffer_get_proc_mem = Buffer.alloc(Buffer.byteLength("get_proc_mem"));
    buffer_get_proc_mem.write("get_proc_mem");
    const str_len_get_proc_mem = Buffer.byteLength(buffer_get_proc_mem);
    const len_buffer_get_proc_mem = Buffer.alloc(4);
    len_buffer_get_proc_mem.writeInt32(str_len_get_proc_mem);
    buffer = Buffer.concat([buffer, len_buffer_get_proc_mem, buffer_get_proc_mem]);
    const buffer_0 = Buffer.alloc(4);
    buffer_0.writeInt32(req.pid);
    buffer = Buffer.concat([buffer, buffer_0]);
    const buffer_len = buffer.length;
    const len_buffer = Buffer.alloc(4);
    len_buffer.writeInt32(buffer_len);
    this.child.stdin.write(len_buffer);
    this.child.stdin.write(buffer);
}
ttt.prototype.ready = function(cb) {
    if (this.is_ready) {
        cb();
    } else {
        this.on_ready = cb;
    }
}
ttt.prototype.on_child_close = function(cb) {
    if (cb) {
        this.child_close = cb;
    }
}
ttt.prototype.initialize = function(req) {
    let buffer = Buffer.alloc(0);
    const buffer_len = buffer.length;
    const len_buffer = Buffer.alloc(4);
    len_buffer.writeInt32(buffer_len);
    this.child.stdin.write(len_buffer);
    this.child.stdin.write(buffer);
}
module.exports = ttt;