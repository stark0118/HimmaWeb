#!/usr/bin/env python
# -*- coding: utf-8 -*-
# **********************************************************************
# This file was generated by a NodejsCallPython parser!
# NodejsCallPython version 1.0.0 by liwang112358@gmail.com
# Generated from desc.json at Fri Mar 27 2020 01:54:59 GMT-0700 (Pacific Daylight Time)
# **********************************************************************
import os
import sys
import struct
def initialize():
    return []
def get_proc_cpu(pid):
    # TODO:
    pcpu = 0.
    return [pcpu]
def get_proc_mem(pid):
    # TODO:
    pmem = 0.
    return [pmem]
def readed(length):
    ret_buffer = ''
    while len(ret_buffer) < length:
        buffer = fd0.read(length - len(ret_buffer))
        if len(buffer) == 0:
            sys.exit(-1)
        ret_buffer += buffer
    return ret_buffer
def written(buffer):
    fd1.write(buffer)
    fd1.flush()
def dbg_log(msg):
    _type = 1
    sid = 0
    buffer_len = len(msg)
    written(struct.pack('=i', _type))
    written(struct.pack('=i', sid))
    written(struct.pack('=i', buffer_len))
    written(msg)
def ready():
    _type = 2
    sid = 0
    buffer_len = 1
    written(struct.pack('=i', _type))
    written(struct.pack('=i', sid))
    written(struct.pack('=i', buffer_len))
    written(' ')
if __name__ == '__main__':
    global fd0
    global fd1
    fd0 = os.fdopen(os.dup(sys.stdin.fileno()), "rb")
    fd1 = os.fdopen(os.dup(sys.stdout.fileno()), "wb")
    os.close(sys.stdin.fileno())
    os.close(sys.stdout.fileno())
    initialized = False
    while True:
        (buf_len,) = struct.unpack('=i', readed(4))
        [] = initialize()
        ready()
        initialized = True
        break
    if not initialized:
        dbg_log("initialize failed.")
        sys.exit(-1)
    while True:
        (buf_len,) = struct.unpack('=i', readed(4))
        (sid,) = struct.unpack('=i', readed(4))
        (len_func_name,) = struct.unpack('=i', readed(4))
        func_name = readed(len_func_name)
        if func_name == "get_proc_cpu":
            (pid,) = struct.unpack('=i', readed(4))
            [pcpu] = get_proc_cpu(pid)
            _type = 0
            written(struct.pack('=i', _type))
            written(struct.pack('=i', sid))
            rsp_buffer = ''
            func_name_len = len(func_name)
            rsp_buffer += struct.pack('=i', func_name_len)
            rsp_buffer += func_name
            rsp_buffer += struct.pack('=f', pcpu)
            rsp_buffer_len = len(rsp_buffer)
            written(struct.pack('=i', rsp_buffer_len))
            written(rsp_buffer)
        if func_name == "get_proc_mem":
            (pid,) = struct.unpack('=i', readed(4))
            [pmem] = get_proc_mem(pid)
            _type = 0
            written(struct.pack('=i', _type))
            written(struct.pack('=i', sid))
            rsp_buffer = ''
            func_name_len = len(func_name)
            rsp_buffer += struct.pack('=i', func_name_len)
            rsp_buffer += func_name
            rsp_buffer += struct.pack('=f', pmem)
            rsp_buffer_len = len(rsp_buffer)
            written(struct.pack('=i', rsp_buffer_len))
            written(rsp_buffer)