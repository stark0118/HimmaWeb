// **********************************************************************
// This file was generated by a NodejsCallC parser!
// NodejsCallC version 1.0.0 by liwang112358@gmail.com
// Generated from desc.json at Fri Mar 27 2020 01:54:59 GMT-0700 (Pacific Daylight Time)
// **********************************************************************
#include "ttt_header.h"
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
using namespace std;
int fd0 = 0;
int fd1 = 0;
int readed(int fd, char* read_buffer, int length)
{
    int recv_len = 0;
    while (recv_len < length) {
        int read_size = read(fd, read_buffer + recv_len, length - recv_len);
        if (read_size <= 0) {
            break;
        }
        recv_len += read_size;
    }
    return recv_len;
}
int written(int fd, char* write_buffer, int length)
{
    int send_len = 0;
    while (send_len < length) {
        int write_size = write(fd, write_buffer + send_len, length - send_len);
        if (write_size <= 0) {
            break;
        }
        send_len += write_size;
    }
    return send_len;
}
void dbg_log(const std::string & msg)
{
    long type = 1;
    long sid = 0;
    long buffer_len = msg.length();
    written(fd1, (char*)&type, 4);
    written(fd1, (char*)&sid, 4);
    written(fd1, (char*)&buffer_len, 4);
    written(fd1, (char*)msg.c_str(), buffer_len);
}
void ready()
{
    long type = 2;
    long sid = 0;
    long buffer_len = 1;
    written(fd1, (char*)&type, 4);
    written(fd1, (char*)&sid, 4);
    written(fd1, (char*)&buffer_len, 4);
    written(fd1, (char*)" ", buffer_len);
}
int main()
{
    fd0 = dup(0);
    fd1 = dup(1);
    close(0);
    close(1);
    bool initialized = false;
    while (true)
    {
        long buf_len = 0;
        long read_size = readed(fd0, (char *)&buf_len, 4);
        if (read_size <= 0) {
            break;
        }
        initialize();
        ready();
        initialized = true;
        break;
    }
    if (!initialized) {
        dbg_log("initialize failed.");
        exit(-1);
    }
    while (true) {
        long buf_len = 0;
        long read_size = readed(fd0, (char *)&buf_len, 4);
        if (read_size <= 0) {
            break;
        }
        long sid = 0;
        read_size = readed(fd0, (char *)&sid, 4);
        if (read_size <= 0) {
            break;
        }
        long len_func_name = 0;
        read_size = readed(fd0, (char *)&len_func_name, 4);
        if (read_size < 0) {
            break;
        }
        char *buffer_func_name = new char[len_func_name];
        read_size = readed(fd0, buffer_func_name, len_func_name);
        if (read_size < 0) {
            break;
        }
        std::string func_name(buffer_func_name, len_func_name);
        delete []buffer_func_name;
        if (func_name == "get_proc_cpu") {
            long pid = 0;
            read_size = readed(fd0, (char *)&pid, 4);
            if (read_size < 0) {
                break;
            }
            float pcpu;
            get_proc_cpu(pid, pcpu);
            long type = 0;
            written(fd1, (char*)&type, 4);
            written(fd1, (char*)&sid, 4);
            std::string rsp_buffer;
            long func_name_len = func_name.length();
            rsp_buffer.append((char*)&func_name_len, 4);
            rsp_buffer.append((char*)func_name.c_str(), func_name_len);
            rsp_buffer.append((char*)&pcpu, 4);
            long rsp_buffer_len = rsp_buffer.length();
            written(fd1, (char*)&rsp_buffer_len, 4);
            written(fd1, (char*)rsp_buffer.c_str(), rsp_buffer_len);
        }
        if (func_name == "get_proc_mem") {
            long pid = 0;
            read_size = readed(fd0, (char *)&pid, 4);
            if (read_size < 0) {
                break;
            }
            float pmem;
            get_proc_mem(pid, pmem);
            long type = 0;
            written(fd1, (char*)&type, 4);
            written(fd1, (char*)&sid, 4);
            std::string rsp_buffer;
            long func_name_len = func_name.length();
            rsp_buffer.append((char*)&func_name_len, 4);
            rsp_buffer.append((char*)func_name.c_str(), func_name_len);
            rsp_buffer.append((char*)&pmem, 4);
            long rsp_buffer_len = rsp_buffer.length();
            written(fd1, (char*)&rsp_buffer_len, 4);
            written(fd1, (char*)rsp_buffer.c_str(), rsp_buffer_len);
        }
    }
    return 0;
}