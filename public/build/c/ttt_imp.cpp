// **********************************************************************
// This file was generated by a NodejsCallC parser!
// NodejsCallC version 1.0.0 by liwang112358@gmail.com
// Generated from desc.json at Fri Mar 27 2020 01:54:59 GMT-0700 (Pacific Daylight Time)
// **********************************************************************
#include "ttt_header.h"
#include <stdio.h>
#include <unistd.h>
#include <sys/time.h>
#include <string.h>
#include <stdlib.h>

#define VMRSS_LINE 17
#define VMSIZE_LINE 13
#define PROCESS_ITEM 14
#define MemTotal_LINE 1




typedef struct {
	long pid;
	long utime;  //user time
	long stime;  //kernel time
	long cutime; //all user time
    long cstime; //all dead time
}Proc_Cpu_Occupy_t;

typedef struct {
	long user;
	long nice;
	long system;
	long idle;
}Total_Cpu_Occupy_t;

const char* get_items(const char*buffer ,int item){

	const char *p =buffer;

	int len = strlen(buffer);
	int count = 0;

	for (int i=0; i<len;i++){
		if (' ' == *p){
			count ++;
			if(count == item -1){
				p++;
				break;
			}
		}
		p++;
	}

	return p;
}

void totalTime(long & totaltime)
{
    // TODO:
    FILE *fd;
    char buff[1024]={0};
    Total_Cpu_Occupy_t t;

    fd =fopen("/proc/stat","r");

    fgets(buff,sizeof(buff),fd);
    char name[64]={0};
    sscanf(buff,"%s %ld %ld %ld %ld",name,&t.user,&t.nice,&t.system,&t.idle);
    fclose(fd);

    totaltime = t.user + t.nice + t.system + t.idle;
}
void pTime(long pid, long & ptime)
{
    // TODO:
    char file_name[64]={0};
    Proc_Cpu_Occupy_t t;
    FILE *fd;
    char line_buff[1024]={0};
    sprintf(file_name,"/proc/%ld/stat",pid);

    fd = fopen(file_name,"r");

    fgets(line_buff,sizeof(line_buff),fd);

    sscanf(line_buff,"%ld",&t.pid);
    const char *q =get_items(line_buff,PROCESS_ITEM);
    sscanf(q,"%ld %ld %ld %ld",&t.utime,&t.stime,&t.cutime,&t.cstime);
    fclose(fd);

    ptime = t.utime + t.stime + t.cutime + t.cstime;

}

void get_total_mem(float & memtotal){

	char file_name[64]={"/proc/meminfo"};
	FILE *fd;
	char line_buff[512]={0};

	fd =fopen(file_name,"r");
	char name[64];
	for (int i=0; i<MemTotal_LINE -1;i++){
		fgets(line_buff,sizeof(line_buff),fd);
	}

	fgets(line_buff,sizeof(line_buff),fd);
	sscanf(line_buff,"%s %f",name,&memtotal);
	fclose(fd);

}
void get_proc_cpu(long pid, float & pcpu)
{
    // TODO:
        long totalcputime1,totalcputime2;
        long procputime1,procputime2;

        totalTime(totalcputime1);
        pTime(pid,procputime1);

        usleep(200000);

        totalTime(totalcputime2);
        pTime(pid, procputime2);

        pcpu = 0.0;
        if(0 != totalcputime2-totalcputime1){
        	pcpu=100.0 * (procputime2-procputime1)/(totalcputime2-totalcputime1);
        }
}
void get_proc_mem(long pid, float & pmem)
{
    // TODO:
    char file_name[64]={0};
        FILE *fd;
        char line_buff[512]={0};
        sprintf(file_name,"/proc/%ld/status",pid);

        fd =fopen(file_name,"r");

        char name[64];
        float vmrss;
        float totalmem;
        for (int i=0; i<VMRSS_LINE-1;i++){
        	fgets(line_buff,sizeof(line_buff),fd);
        }

        fgets(line_buff,sizeof(line_buff),fd);
        sscanf(line_buff,"%s %f",name,&vmrss);
        fclose(fd);

        get_total_mem(totalmem);

        pmem = (vmrss / totalmem)*100;
}